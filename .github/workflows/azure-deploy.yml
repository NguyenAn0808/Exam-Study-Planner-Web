name: Deploy to Azure Container Apps

on:
  push:
    branches: [production]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          
      # Create package-lock.json if it doesn't exist
      - name: Create frontend package-lock.json
        run: |
          cd frontend
          if [ ! -f package-lock.json ]; then
            npm i --package-lock-only
          fi
          
      - name: Create backend package-lock.json
        run: |
          cd backend
          if [ ! -f package-lock.json ]; then
            npm i --package-lock-only
          fi
          
      # Now setup cache with the generated lock files      
      - name: Cache frontend dependencies
        uses: actions/cache@v4
        with:
          path: |
            frontend/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-
            
      - name: Cache backend dependencies
        uses: actions/cache@v4
        with:
          path: |
            backend/node_modules
          key: ${{ runner.os }}-backend-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-backend-
          
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci || npm install
      
      - name: Run frontend linting
        working-directory: ./frontend
        run: npm run lint || echo "⚠️ Linting issues found but continuing"
        
      - name: TypeScript check frontend
        working-directory: ./frontend
        run: |
          echo "Running TypeScript check... (errors will be displayed but won't fail the build)"
          npm run typecheck || echo "⚠️ TypeScript check found errors. See output above."
      
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci || npm install
        
      # Add tests here if you have them
      
  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Register required Azure providers
        run: |
          echo "Registering Microsoft.App provider..."
          az provider register --namespace Microsoft.App --wait
          echo "Registering Microsoft.ContainerRegistry provider..."
          az provider register --namespace Microsoft.ContainerRegistry --wait
          echo "Provider registration complete"
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Azure Container Registry with Azure CLI
        run: |
          echo "Logging in to ACR: ${{ secrets.ACR_LOGIN_SERVER }}"
          az acr login --name ${{ secrets.ACR_NAME }}
          echo "Login successful"
      
      # Debug ACR login server value
      - name: Debug ACR values
        run: |
          echo "ACR Login Server: ${{ secrets.ACR_LOGIN_SERVER }}"
          echo "ACR Name: ${{ secrets.ACR_NAME }}"
          
      # Build and push backend image with explicit naming
      - name: Build and push backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.ACR_NAME }}.azurecr.io/exam-planner-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      # Build and push frontend image with explicit naming
      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.ACR_NAME }}.azurecr.io/exam-planner-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max      # Deploy Backend to Azure Container App
      - name: Deploy Backend to Azure Container App
        uses: azure/container-apps-deploy-action@v1
        with:
          appSourcePath: ${{ github.workspace }}
          acrName: ${{ secrets.ACR_NAME }}
          containerAppName: exam-planner-backend
          resourceGroup: ${{ secrets.AZURE_RESOURCE_GROUP }}
          imageToDeploy: ${{ secrets.ACR_NAME }}.azurecr.io/exam-planner-backend:latest
          targetPort: 5001
          environmentVariables: |
            MONGODB_CONNECTION_STRING=${{ secrets.MONGODB_CONNECTION_STRING }}
            PORT=5001
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            NODE_ENV=production
      
      # Deploy Frontend to Azure Container App
      - name: Deploy Frontend to Azure Container App
        uses: azure/container-apps-deploy-action@v1
        with:
          appSourcePath: ${{ github.workspace }}
          acrName: ${{ secrets.ACR_NAME }}
          containerAppName: exam-planner-frontend
          resourceGroup: ${{ secrets.AZURE_RESOURCE_GROUP }}
          imageToDeploy: ${{ secrets.ACR_NAME }}.azurecr.io/exam-planner-frontend:latest
          targetPort: 80
          ingress: external