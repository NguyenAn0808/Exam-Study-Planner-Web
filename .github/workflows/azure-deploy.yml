name: Deploy to Azure Container Apps

on:
  push:
    branches: [production]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          
      # Create package-lock.json if it doesn't exist
      - name: Create frontend package-lock.json
        run: |
          cd frontend
          if [ ! -f package-lock.json ]; then
            npm i --package-lock-only
          fi
          
      - name: Create backend package-lock.json
        run: |
          cd backend
          if [ ! -f package-lock.json ]; then
            npm i --package-lock-only
          fi
          
      # Now setup cache with the generated lock files      
      - name: Cache frontend dependencies
        uses: actions/cache@v4
        with:
          path: |
            frontend/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-
            
      - name: Cache backend dependencies
        uses: actions/cache@v4
        with:
          path: |
            backend/node_modules
          key: ${{ runner.os }}-backend-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-backend-
          
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci || npm install
      
      - name: Run frontend linting
        working-directory: ./frontend
        run: npm run lint || echo "‚ö†Ô∏è Linting issues found but continuing"
        
      - name: TypeScript check frontend
        working-directory: ./frontend
        run: |
          echo "Running TypeScript check... (errors will be displayed but won't fail the build)"
          npm run typecheck || echo "‚ö†Ô∏è TypeScript check found errors. See output above."
      
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci || npm install
        
      # Add tests here if you have them
      
  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      # Note: We need to skip provider registration as service principal does not have rights
      # We're assuming the provider is already registered in the subscription manually
      - name: Check Azure providers status
        run: |
          echo "Checking Microsoft.App provider status..."
          az provider show -n Microsoft.App --query "registrationState" -o tsv || echo "Provider may need manual registration"
          echo "Checking Microsoft.ContainerRegistry provider status..."
          az provider show -n Microsoft.ContainerRegistry --query "registrationState" -o tsv || echo "Provider may need manual registration"
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Azure Container Registry with Azure CLI
        run: |
          echo "Logging in to ACR: ${{ secrets.ACR_LOGIN_SERVER }}"
          az acr login --name ${{ secrets.ACR_NAME }}
          echo "Login successful"
      
      # Debug ACR login server value
      - name: Debug ACR values
        run: |
          echo "ACR Login Server: ${{ secrets.ACR_LOGIN_SERVER }}"
          echo "ACR Name: ${{ secrets.ACR_NAME }}"
          
      # Build and push backend image with explicit naming
      - name: Build and push backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.ACR_NAME }}.azurecr.io/exam-planner-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      # Build and push frontend image with explicit naming
      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.ACR_NAME }}.azurecr.io/exam-planner-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max      # Deploy Backend to Azure Container App using Azure CLI
      - name: Deploy Backend to Azure Container App
        run: |
          echo "Creating backend container app..."
          az containerapp create \
            --name exam-planner-backend \
            --resource-group exam-planner-rg \
            --environment exam-planner-env \
            --image ${{ secrets.ACR_NAME }}.azurecr.io/exam-planner-backend:latest \
            --target-port 5001 \
            --ingress internal \
            --registry-server ${{ secrets.ACR_NAME }}.azurecr.io \
            --env-vars \
              MONGODB_CONNECTION_STRING="${{ secrets.MONGODB_CONNECTION_STRING }}" \
              PORT=5001 \
              OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
              NODE_ENV=production \
            --cpu 0.25 \
            --memory 0.5Gi \
            --min-replicas 0 \
            --max-replicas 1
      
      # Deploy Frontend to Azure Container App using Azure CLI
      - name: Deploy Frontend to Azure Container App
        run: |
          echo "Creating frontend container app..."
          az containerapp create \
            --name exam-planner-frontend \
            --resource-group exam-planner-rg \
            --environment exam-planner-env \
            --image ${{ secrets.ACR_NAME }}.azurecr.io/exam-planner-frontend:latest \
            --target-port 80 \
            --ingress external \
            --registry-server ${{ secrets.ACR_NAME }}.azurecr.io \
            --cpu 0.25 \
            --memory 0.5Gi \
            --min-replicas 0 \
            --max-replicas 1
          
      # Display deployment URLs
      - name: Display Deployment URLs
        run: |
          echo "üéâ Deployment completed successfully!"
          echo ""
          echo "üì± Frontend URL: https://exam-planner-frontend.graywave-05c71fd1.southeastasia.azurecontainerapps.io"
          echo "üîß Backend URL: https://exam-planner-backend.graywave-05c71fd1.southeastasia.azurecontainerapps.io"
          echo ""
          echo "üåê Main Application: https://exam-planner-frontend.graywave-05c71fd1.southeastasia.azurecontainerapps.io"